import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:universal_html/html.dart' as html;

import '../../core/app_export.dart';
import '../../widgets/custom_app_bar.dart';
import '../../widgets/custom_bottom_bar.dart';
import './widgets/trip_companions_widget.dart';
import './widgets/trip_map_widget.dart';
import './widgets/trip_notes_widget.dart';
import './widgets/trip_statistics_widget.dart';
import './widgets/trip_summary_card_widget.dart';
import './widgets/trip_timeline_widget.dart';

class TripDetailView extends StatefulWidget {
  const TripDetailView({super.key});

  @override
  State<TripDetailView> createState() => _TripDetailViewState();
}

class _TripDetailViewState extends State<TripDetailView> {
  bool _isEditing = false;
  bool _isLoading = false;
  late Map<String, dynamic> _tripData;

  final List<Map<String, dynamic>> _mockTripData = [
    {
      "id": "trip_001",
      "date": "September 12, 2025",
      "startTime": "08:30 AM",
      "endTime": "09:15 AM",
      "duration":
          45, // minutes "distance": 12.5, // kilometers "travelMode": "Bus",
      "companionCount": 2,
      "category": "Commute",
      "gpsAccuracy": "High",
      "dataQuality": "Excellent",
      "origin": {
        "address": "123 Main Street, Downtown District, Metro City",
        "latitude": 40.7128,
        "longitude": -74.0060,
      },
      "destination": {
        "address": "456 Business Plaza, Corporate Center, Metro City",
        "latitude": 40.7589,
        "longitude": -73.9851,
      },
      "companions": [
        {
          "id": "comp_001",
          "name": "Sarah Johnson",
          "age": "28",
          "relationship": "Colleague",
        },
        {
          "id": "comp_002",
          "name": "Michael Chen",
          "age": "32",
          "relationship": "Friend",
        },
      ],
      "timeline": [
        {
          "time": "08:30 AM",
          "type": "Start",
          "description": "Trip started at Main Street bus stop",
          "speed": null,
        },
        {
          "time": "08:35 AM",
          "type": "Waypoint",
          "description": "Bus arrived, boarding completed",
          "speed": 0,
        },
        {
          "time": "08:45 AM",
          "type": "Mode_Change",
          "description": "Bus moving at steady speed through downtown",
          "speed": 25,
        },
        {
          "time": "09:10 AM",
          "type": "Waypoint",
          "description": "Approaching destination, preparing to exit",
          "speed": 15,
        },
        {
          "time": "09:15 AM",
          "type": "Stop",
          "description": "Arrived at Business Plaza, trip completed",
          "speed": 0,
        },
      ],
      "notes":
          "Regular morning commute to office. Bus was on time and not crowded. Weather was pleasant, making the journey comfortable. Discussed project updates with Sarah during the trip.",
    },
  ];

  @override
  void initState() {
    super.initState();
    _tripData = Map<String, dynamic>.from(_mockTripData.first);
  }

  void _toggleEditMode() {
    setState(() {
      _isEditing = !_isEditing;
    });

    if (!_isEditing) {
      _saveChanges();
    }
  }

  Future<void> _saveChanges() async {
    setState(() => _isLoading = true);

    // Simulate API call
    await Future.delayed(const Duration(milliseconds: 800));

    setState(() => _isLoading = false);

    Fluttertoast.showToast(
      msg: "Trip details saved successfully",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: AppTheme.successGreen,
      textColor: AppTheme.backgroundWhite,
    );
  }

  void _shareTrip() {
    final tripSummary = '''
Trip Summary - ${_tripData['date']}

From: ${_tripData['origin']['address']}
To: ${_tripData['destination']['address']}
Mode: ${_tripData['travelMode']}
Duration: ${_formatDuration(_tripData['duration'] as int)}
Distance: ${_formatDistance((_tripData['distance'] as num).toDouble())}
Companions: ${_tripData['companionCount'] ?? 0}

Generated by TripWise - Smarter Travel Insights
''';

    Clipboard.setData(ClipboardData(text: tripSummary));

    Fluttertoast.showToast(
      msg: "Trip details copied to clipboard",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: AppTheme.primaryBlue,
      textColor: AppTheme.backgroundWhite,
    );
  }

  void _exportTripData() {
    final tripJson = jsonEncode(_tripData);
    final fileName =
        'trip_${_tripData['id']}_${DateTime.now().millisecondsSinceEpoch}.json';

    try {
      final bytes = utf8.encode(tripJson);
      final blob = html.Blob([bytes]);
      final url = html.Url.createObjectUrlFromBlob(blob);
      final anchor = html.AnchorElement(href: url)
        ..setAttribute("download", fileName)
        ..click();
      html.Url.revokeObjectUrl(url);

      Fluttertoast.showToast(
        msg: "Trip data exported successfully",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: AppTheme.successGreen,
        textColor: AppTheme.backgroundWhite,
      );
    } catch (e) {
      Fluttertoast.showToast(
        msg: "Export failed. Please try again.",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
        backgroundColor: AppTheme.errorRed,
        textColor: AppTheme.backgroundWhite,
      );
    }
  }

  void _deleteTrip() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Trip'),
        content: const Text(
          'Are you sure you want to delete this trip? This action cannot be undone and will remove the trip data from research analysis.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _confirmDelete();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppTheme.errorRed,
            ),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  void _confirmDelete() {
    Fluttertoast.showToast(
      msg: "Trip deleted successfully",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: AppTheme.errorRed,
      textColor: AppTheme.backgroundWhite,
    );

    Navigator.of(context).pushReplacementNamed('/trip-history');
  }

  void _showFullScreenMap() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => Scaffold(
          appBar: CustomAppBar.modal(
            title: 'Trip Route',
            backgroundColor: AppTheme.backgroundWhite,
          ),
          body: TripMapWidget(
            tripData: _tripData,
          ),
        ),
      ),
    );
  }

  void _onCompanionsChanged(List<Map<String, dynamic>> companions) {
    setState(() {
      _tripData['companions'] = companions;
      _tripData['companionCount'] = companions.length;
    });
  }

  void _onNotesChanged(String notes) {
    setState(() {
      _tripData['notes'] = notes;
    });
  }

  String _formatDuration(int minutes) {
    if (minutes < 60) {
      return '${minutes}m';
    } else {
      final hours = minutes ~/ 60;
      final remainingMinutes = minutes % 60;
      return remainingMinutes > 0
          ? '${hours}h ${remainingMinutes}m'
          : '${hours}h';
    }
  }

  String _formatDistance(double kilometers) {
    if (kilometers < 1) {
      return '${(kilometers * 1000).toInt()}m';
    } else {
      return '${kilometers.toStringAsFixed(1)} km';
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.scaffoldBackgroundColor,
      appBar: CustomAppBar.tripDetail(
        onEdit: _toggleEditMode,
        onShare: _shareTrip,
        onDelete: _deleteTrip,
      ),
      body: _isLoading
          ? const Center(
              child: CircularProgressIndicator(),
            )
          : SingleChildScrollView(
              physics: const BouncingScrollPhysics(),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 16),

                  // Map Section
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: TripMapWidget(
                      tripData: _tripData,
                      onFullScreen: _showFullScreenMap,
                    ),
                  ),

                  const SizedBox(height: 8),

                  // Trip Summary Card
                  TripSummaryCardWidget(
                    tripData: _tripData,
                  ),

                  // Timeline Widget
                  TripTimelineWidget(
                    tripData: _tripData,
                  ),

                  // Companions Widget
                  TripCompanionsWidget(
                    tripData: _tripData,
                    isEditing: _isEditing,
                    onCompanionsChanged: _onCompanionsChanged,
                  ),

                  // Notes Widget
                  TripNotesWidget(
                    tripData: _tripData,
                    isEditing: _isEditing,
                    onNotesChanged: _onNotesChanged,
                  ),

                  // Statistics Widget
                  TripStatisticsWidget(
                    tripData: _tripData,
                  ),

                  // Action Buttons
                  if (_isEditing) ...[
                    const SizedBox(height: 16),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        children: [
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: () =>
                                  setState(() => _isEditing = false),
                              icon: CustomIconWidget(
                                iconName: 'close',
                                color: AppTheme.textSecondary,
                                size: 18,
                              ),
                              label: const Text('Cancel'),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: _toggleEditMode,
                              icon: CustomIconWidget(
                                iconName: 'save',
                                color: AppTheme.backgroundWhite,
                                size: 18,
                              ),
                              label: const Text('Save Changes'),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ] else ...[
                    const SizedBox(height: 16),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        children: [
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: _exportTripData,
                              icon: CustomIconWidget(
                                iconName: 'download',
                                color: AppTheme.primaryBlue,
                                size: 18,
                              ),
                              label: const Text('Export Data'),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: _toggleEditMode,
                              icon: CustomIconWidget(
                                iconName: 'edit',
                                color: AppTheme.backgroundWhite,
                                size: 18,
                              ),
                              label: const Text('Edit Trip'),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],

                  const SizedBox(height: 100), // Bottom padding for navigation
                ],
              ),
            ),
      bottomNavigationBar: CustomBottomBar(
        currentRoute: '/trip-detail-view',
        onTap: (route) => Navigator.pushReplacementNamed(context, route),
      ),
    );
  }
}
